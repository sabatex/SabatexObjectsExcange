@page "/clientnode/list"
@attribute [Authorize]
@inject HttpClient HttpClient
@inject SabatexJsInterop SabatexJS
@rendermode InteractiveWebAssembly
<SabatexRadzenGrid TItem="Models.ClientNode" TKey="Guid" ForeginKey="ForeginKey" @ref=grid>
    <Buttons Context="item">
        <RadzenButton Text="CleanNode" Click="()=>CleanNode(item)" Disabled=@(item == null) />
        <RadzenButton Text="Export CSV" Icon="wrap_text" Click="@(async args => await ExportAsync())" />
        <RadzenButton Text="Download" Icon="download" Click="@(async args => await DownloadAsync())" />
         <div>
        <RadzenLabel Component="uploadFile" >
                <RadzenBadge Text="Upload" BadgeStyle="BadgeStyle.Primary" Style="height:35px;width:100px" />
        </RadzenLabel>
        <InputFile id="uploadFile" hidden OnChange="UploadChange" />
    </div>

     </Buttons>

    <Columns>
        <RadzenDataGridColumn TItem="Models.ClientNode" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Models.ClientNode" Property="Counter" Title="CountPerDay" Width="120px" />
        <RadzenDataGridColumn TItem="Models.ClientNode" Property="ObjectsCount" Title="Objects" Width="120px" />
    </Columns>
</SabatexRadzenGrid>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid ClientId { get; set; }

    SabatexRadzenGrid<Guid,Models.ClientNode> grid;

    ForeginKey ForeginKey => new ForeginKey("ClientId", ClientId.ToString());

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    async void CleanNode(Models.ClientNode node)
    {
        await HttpClient.DeleteAsync($"api/clientnode/clean/{node.Id}");
    }

    public async Task ExportAsync()
    {
        await SabatexJS.DownloadStringAsFile("Nodes.csv",string.Join("\r\n",  grid.Items.Select(c => $"{c.Name.Replace(',','_')},{c.Id}").ToArray()));
    }
    public async Task DownloadAsync()
    {
        await SabatexJS.DownloadStringAsFile("Nodes.json", System.Text.Json.JsonSerializer.Serialize(grid.Items));
    }
    List<string> Log = new List<string>();
    async Task LogWriteLine(string s)
    {
        Log.Add(s);
        await InvokeAsync(() => StateHasChanged());
    }
    async Task LogWrite(string s)
    {
        var lastString = Log.Last();
        Log[Log.Count - 1] = lastString + s;
        await InvokeAsync(() => StateHasChanged());
    }

    async Task UploadChange(InputFileChangeEventArgs file)
    {
        await LogWriteLine("Start import data.");
        try
        {
            string fileName = file.File.Name;
            string ext = Path.GetExtension(fileName);


            if (ext == ".json")
            {


                await LogWriteLine("Load file to memory  ...");
                var stream = new MemoryStream();
                await file.File.OpenReadStream(9512000).CopyToAsync(stream);
                await LogWrite(" Ok");

                string s = System.Text.Encoding.UTF8.GetString(stream.ToArray());
                var clientNodes = System.Text.Json.JsonSerializer.Deserialize<Models.ClientNode[]>(s);
                foreach (var item in clientNodes ?? new Models.ClientNode[] { })
                {
                    item.ClientId = ClientId;
                    await HttpClient.PostAsJsonAsync("api/clientnode", item);
                }

              }
        }
        catch (Exception ex)
        {
            await LogWrite(ex.Message);
        }
    }


}
