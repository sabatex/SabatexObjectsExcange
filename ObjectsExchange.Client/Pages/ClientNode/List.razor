@page "/clientnode/list"
@attribute [Authorize]
@inherits SabatexRadzenBlazorBasePage

<SabatexRadzenGrid TItem="Models.ClientNode" TKey="Guid" ForeginKey="ForeginKey" @ref=grid>
    <Buttons Context="item">
        <RadzenButton Text="CleanNode" Click="()=>CleanNode(item)" Disabled=@(item == null) />
        <RadzenButton Text="Export CSV" Icon="wrap_text" Click="@(args => Export())" />
     </Buttons>

    <Columns>
        <RadzenDataGridColumn TItem="Models.ClientNode" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="Models.ClientNode" Property="Counter" Title="CountPerDay" Width="120px" />
        <RadzenDataGridColumn TItem="Models.ClientNode" Property="QueriesCount" Title="Queries" Width="120px" />
        <RadzenDataGridColumn TItem="Models.ClientNode" Property="ObjectsCount" Title="Objects" Width="120px" />
    </Columns>
</SabatexRadzenGrid>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public Guid ClientId { get; set; }

    SabatexRadzenGrid<Guid,Models.ClientNode> grid;
 
    ForeginKey ForeginKey => new ForeginKey("ClientId", ClientId.ToString());

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    async void CleanNode(Models.ClientNode node)
    {
         await HttpClient.DeleteAsync($"api/clientnode/clean/{node.Id}");
    }
    
    public async Task Export()
    {
        await SabatexJS.DownloadStringAsFile("Nodes.csv",string.Join("\r\n",  grid.Items.Select(c => $"{c.Name.Replace(',','_')},{c.Id}").ToArray()));
    }

}
