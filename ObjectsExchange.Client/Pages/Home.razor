@page "/"
@using ObjectsExchange.Client.Services
@inject IApiAdapter ApiAdapter


<PageTitle>Home</PageTitle>

<AuthorizeView Roles="Administrator">
    <Authorized>
        <RadzenButton Click="Download">
            <RadzenBadge Text="Base Download" BadgeStyle="BadgeStyle.Primary" />
        </RadzenButton>
    </Authorized>
    <NotAuthorized>
        Not Autorized
    </NotAuthorized>
</AuthorizeView>

@if (IsAdmin)
{
    <RadzenContent Container="main">
        <ChildContent>
            <div class="row">
                <div class="col-md-12">
                    <SabatexRadzenGrid TItem="Sabatex.ObjectsExchange.Models.Client" TKey="Guid" DoubleClickRowEdit=false OnRowClick="Nodes">
                        <Buttons Context="item">
                            <RadzenButton Text="Nodes" Click="()=>Nodes(item)" Disabled=@(item == null) />
                        </Buttons>
                        <Columns>
                            <RadzenDataGridColumn TItem="Sabatex.ObjectsExchange.Models.Client" Property="Description" Title="Description" />
                        </Columns>
                    </SabatexRadzenGrid>
                </div>
            </div>
        </ChildContent>
    </RadzenContent>

}



@body


@code
{
    bool IsAdmin = false;

    const string FileName = "Readme.md";
    private MarkupString? body;
    RenderFragment StringToHtml(string htmlString)
    {
        return new RenderFragment(b => b.AddMarkupContent(0, htmlString));
    }
    protected override async Task OnInitializedAsync()
    {
        var markDown = await ApiAdapter.GetReadmeAsync();
        body = new MarkupString(Markdig.Markdown.ToHtml(markDown));
        IsAdmin = await AuthenticationStateProvider.UserIsInRore(ApplicationClaim.AdministratorRole);


        // if (System.IO.File.Exists(FileName))
        // {
        //     var markDown = await System.IO.File.ReadAllTextAsync(FileName);
        //     body = new MarkupString(Markdig.Markdown.ToHtml(markDown));
        // }
        // else
        // {

        //     body =new MarkupString( $"The file {FileName} do not exist !");
        // }

    }
    async Task Download()
    {
        var jsonString = await ApiAdapter.GetDataBaseBackupAsync();
        await SabatexJsInterop.DownloadStringAsFile("SabatexExchange.json", jsonString);
    }
    void Nodes(Sabatex.ObjectsExchange.Models.Client? client)
    {
        var query = new Dictionary<string, object?>();
        query.Add("ClientId", client.Id.ToString());
        var uri = NavigationManager.GetUriWithQueryParameters($"clientnode/list", query);
        NavigationManager.NavigateTo(uri);
    }
}