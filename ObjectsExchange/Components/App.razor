@* @inject NavigationManager NavigationManager *@
@using System.Globalization
@using Microsoft.AspNetCore.Localization

<!DOCTYPE html>
<html lang="@language">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="css/site.css" />
    <link rel="icon" href="icon-192.png" />
    <link href="manifest.json" rel="manifest" />
    <link rel="apple-touch-icon" sizes="512x512" href="icon-512.png" />

    <Radzen.Blazor.RadzenTheme Theme="material" @rendermode="RenderModeForPage" />
    <HeadOutlet @rendermode="RenderModeForPage" />
</head>

<body>
    <Routes @rendermode="RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script>navigator.serviceWorker.register('service-worker.js');</script>
    <script src="js/qrcode.min.js"></script>
    <script>
        //window.blazorCulture = { set: (culture) => { localStorage['BlazorCulture'] = culture; }, get: () => localStorage['BlazorCulture'] };
    </script>
    <script>
        // Blazor.start({
        //   webAssembly: {
        //     applicationCulture: 'uk-UA'
        //   }
        // });
    </script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    string language = "en-US";

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null
    : new InteractiveWebAssemblyRenderMode(prerender:false);
    // protected override void OnInitialized()
    // {
    //     HttpContext?.Response.Cookies.Append(
    //         CookieRequestCultureProvider.DefaultCookieName,
    //         CookieRequestCultureProvider.MakeCookieValue(
    //             new RequestCulture(
    //                 CultureInfo.GetCultureInfo("uk-UA"),//  CultureInfo.CurrentCulture,
    //                 CultureInfo.GetCultureInfo("uk-UA") /** CultureInfo.CurrentUICulture **/)));
    // }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var language = HttpContext?.Request.Headers["Accept-Language"].ToString();
        this.language = Sabatex.Blazor.Globalization.GetSupportedCultureByAcceptLanguage(language);

    }
}
