@page "/"
@using ObjectsExchange.Client.Services
@inject IStringLocalizer<Home> Loc



<PageTitle>Home</PageTitle>
<AuthorizeView>
    <Authorized>Ви  авторизовані</Authorized>
    <NotAuthorized>
        <RadzenAlert AlertStyle="AlertStyle.Warning" AllowClose="false">
            @Loc["You are not authorized, authorization is required for further work."]
        </RadzenAlert>
    </NotAuthorized>
</AuthorizeView>

@* @body *@


@code
{
    bool IsAdmin = false;

    //const string FileName = "Readme.md";
    //private MarkupString? body;
    RenderFragment StringToHtml(string htmlString)
    {
        return new RenderFragment(b => b.AddMarkupContent(0, htmlString));
    }
    protected override async Task OnInitializedAsync()
    {
        //var markDown = await ApiAdapter.GetReadmeAsync();
        //body = new MarkupString(Markdig.Markdown.ToHtml(markDown));
        // IsAdmin = await AuthenticationStateProvider.IsInRoreAsync(ApplicationClaim.AdministratorRole);
        // var state =await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // if (await AuthenticationStateProvider.IsAuthenticatedAsync())
        // {
        //         NavigationManager.NavigateTo("client/list");

        // }    
    }
    async Task Download()
    {
        // var jsonString = await ApiAdapter.GetDataBaseBackupAsync();
        // await SabatexJsInterop.DownloadStringAsFile("SabatexExchange.json", jsonString);
    }
    void Nodes(Sabatex.ObjectsExchange.Models.Client? client)
    {
        // var query = new Dictionary<string, object?>();
        // query.Add("ClientId", client.Id.ToString());
        // var uri = NavigationManager.GetUriWithQueryParameters($"clientnode/list", query);
        // NavigationManager.NavigateTo(uri);
    }
}